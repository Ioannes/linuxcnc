#
# Joypad_jog_speed.hal 
#
# This file is an example .hal for control of the halui jog speed using a hal_input device.
# This was tested with a Logitech F310.
#
# This file connects three buttons to choose maximum jog speed in axis and joint modes.
# Add this file to postgui_call_list.hal using a line with "source Joypad_jog_speed.hal".
# Add another file (joypad_xyz.hal or joypad_xy.hal) to link the joysticks values to achieve motion.
#
loadusr -W hal_input -KRAL Microsoft X-Box 360 pad

loadrt or2 names=joy_or2_sel0,joy_or2_sel1
loadrt mux4 names=joy_mux4
#loadrt invert 

addf joy_or2_sel0 servo-thread
addf joy_or2_sel1 servo-thread
addf joy_mux4 servo-thread
#
# Set the jog speed for the joypad speed selection. Use numbers that make sense for your machine.
#
setp joy_mux4.in0 10.0   # Setting this input to 0 prevents motion unless one of the other buttons is pressed.
setp joy_mux4.in1 10.0   # Max jog speed when first speed select button is pressed.
setp joy_mux4.in2 300.0  # Max jog speed when second speed select button is pressed.
setp joy_mux4.in3 1500.0 # Max jog speed when third speed select button is pressed.
#
# The following lines do the magic of setting the jog speed selection. You must hold at least one of the buttons while jogging.
# Notice this does not fully decode the button possibilities. If you simultaneously press multiple buttons you will get the higher speed.
#
net slow   <= joy_or2_sel0.in0 			=> input.0.btn-a                # Button for selecting first jog speed.
net medium <= joy_or2_sel1.in0 			=> input.0.btn-b                   # Button for selecting second jog speed.
net fast   <= joy_or2_sel0.in1 joy_or2_sel1.in1 => input.0.btn-x # Button for selecting third jog speed.

net joy-speed-sel0 <= joy_or2_sel0.out  => joy_mux4.sel0 
net joy-speed-sel1 <= joy_or2_sel1.out  => joy_mux4.sel1 
net jog-speed      <= joy_mux4.out 	=> halui.axis.jog-speed halui.joint.jog-speed

loadrt mux2 names=mux2_x,mux2_y,mux2_z,mux2_a

addf mux2_x servo-thread
addf mux2_y servo-thread
addf mux2_z servo-thread
addf mux2_a servo-thread

net machine-is-on <= halui.machine.is-on => mux2_x.sel mux2_y.sel mux2_z.sel mux2_a.sel  # Control the mux with the machine on/off state.

loadrt mult2 names=mult2_x,mult2_y,mult2_z,mult2_a
addf mult2_x servo-thread
addf mult2_y servo-thread
addf mult2_z servo-thread
addf mult2_a servo-thread

setp mult2_x.in0 -1
setp mult2_y.in0  1
setp mult2_z.in0 -1
setp mult2_a.in0  5

net jog-x-neg input.0.abs-x-position =>  mult2_x.in1
net jog-y-neg input.0.abs-y-position =>  mult2_y.in1
net jog-z-neg input.0.abs-ry-position => mult2_z.in1
net jog-a-neg input.0.abs-rx-position => mult2_a.in1

net jog-x-pre <= mult2_x.out => mux2_x.in1
net jog-y-pre <= mult2_y.out => mux2_y.in1
net jog-z-pre <= mult2_z.out => mux2_z.in1	
net jog-a-pre <= mult2_a.out => mux2_a.in1	

net jog-x-analog <= mux2_x.out => mux2_x.in0 halui.joint.0.analog halui.axis.x.analog 
net jog-y-analog <= mux2_y.out => mux2_y.in0 halui.joint.1.analog halui.axis.y.analog 
net jog-z-analog <= mux2_z.out => mux2_z.in0 halui.joint.2.analog halui.axis.z.analog 
net jog-a-analog <= mux2_a.out => mux2_a.in0 halui.joint.3.analog halui.axis.a.analog 

net JoypadMachineOn input.0.btn-select => halui.estop.reset halui.machine.on
net JoypadMachineEstop  input.0.btn-mode => halui.estop.activate
